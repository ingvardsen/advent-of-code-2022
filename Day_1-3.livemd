<!-- livebook:{"persist_outputs":true} -->

# Advent of Code 2022, Day 1-3

```elixir
Mix.install([:kino, {:kino_aoc, git: "https://github.com/ljgago/kino_aoc"}])
```

<!-- livebook:{"output":true} -->

```
:ok
```

## Day 1

https://adventofcode.com

<!-- livebook:{"attrs":{"day":"1","session_secret":"AOC_SESSION","variable":"puzzle_input","year":"2022"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} = KinoAOC.download_puzzle("2022", "1", System.fetch_env!("LB_AOC_SESSION"))
```

<!-- livebook:{"output":true} -->

```
{:ok,
 "6529\n8085\n4534\n1503\n2983\n5030\n2135\n5866\n5092\n5059\n1232\n\n15219\n7137\n2691\n2898\n1798\n\n4495\n2146\n3114\n5971\n2023\n2326\n6386\n4454\n2632\n3077\n2878\n2850\n\n8347\n4368\n2646\n3785\n8383\n1847\n10738\n4345\n\n1561\n5338\n3783\n4897\n3623\n6192\n2419\n6170\n1459\n1708\n4129\n4703\n3723\n5623\n\n4684\n4823\n1065\n2276\n\n5594\n2941\n3455\n3358\n4167\n4799\n3685\n3151\n3152\n1653\n5886\n5390\n1322\n\n5305\n3665\n1763\n3359\n1851\n2194\n7262\n5151\n6598\n6326\n3639\n\n7665\n4909\n5829\n6440\n7734\n7955\n5366\n8355\n3715\n5227\n\n13214\n14041\n16730\n5522\n\n1594\n5656\n2728\n5500\n7330\n7734\n7427\n3196\n1523\n1596\n\n4125\n5353\n6549\n6118\n1294\n1272\n7007\n5572\n4896\n3169\n7709\n\n1252\n9688\n2823\n7172\n8492\n4208\n1800\n5715\n3152\n\n3186\n12541\n19573\n\n11484\n8691\n11020\n2916\n1963\n12731\n\n1451\n14095\n6033\n8075\n10327\n\n5059\n1674\n5504\n5870\n6537\n3352\n7099\n5695\n\n1238\n6348\n3080\n2109\n8335\n5178\n5324\n8800\n6917\n\n5791\n2597\n4437\n4446\n2491\n5246\n5065\n2294\n1523\n2427\n5077\n3624\n\n29241\n1823\n\n4907\n4748\n4849\n5602\n1965\n1184\n2380\n3794\n4338\n1647\n5942\n2999\n4634\n1627\n5374\n\n3929\n3291\n4898\n6074\n5349\n3256\n5042\n4300\n2866\n1660\n5942\n4029\n3301\n4653\n\n6239\n3830\n1773\n4081\n1078\n6356\n1570\n5862\n3328\n5806\n4974\n6552\n2162\n\n62947\n\n11189\n2609\n1987\n6087\n7704\n\n6355\n15744\n4331\n14437\n\n10677\n3241\n7979\n3643\n1131\n7711\n2069\n3945\n\n5626\n7282\n10610\n5553\n9387\n2196\n6064\n8325\n\n2376\n5418\n5256\n2834\n5146\n1356\n5956\n3389\n2357\n3216\n1988\n1264\n2620\n1334\n4345\n\n3774\n4300\n5766\n8511\n1535\n1431\n4666\n2073\n8279\n6881\n\n4788\n6221\n3354\n2403\n9211\n1869\n\n6052\n6845\n1214\n3467\n2008\n1129\n4537\n1810\n4805\n2752\n1294\n3764\n\n5326\n2255\n6754\n3961\n2481\n3493\n1696\n5639\n8564\n5161\n\n4773\n1683\n3104\n6495\n6879\n1932\n1894\n4526\n5013\n3114\n3956\n2401\n1211\n\n10777\n\n4328\n1321\n3656\n4368\n3932\n5701\n4040\n1146\n6344\n2406\n6461\n6133\n5276\n1058\n\n10525\n2492\n1508\n7667\n3349\n4659\n8078\n9070\n\n6095\n6001\n9615\n11546\n9401\n1185\n9038\n\n7528\n3118\n12935\n13110\n1345\n\n5863\n3750\n1911\n1501\n3564\n5163\n5684\n1544\n1535\n1009\n3071\n4870\n2717\n\n10390\n1714\n12404\n3155\n5534\n\n5965\n8382\n1849\n1844\n7654\n9554\n3685\n6535\n\n3281\n7001\n4418\n1128\n7339\n5821\n7149\n2368\n2086\n7218\n5802\n5233\n\n9320\n\n1200\n7288\n8100\n8743\n5675\n4827\n3289\n2862\n8348\n\n16472\n18172\n16411\n16413\n\n7073\n1820\n8120\n7426\n6211\n1610\n5391\n7900\n\n4090\n4417\n5467\n5302\n4528\n3809\n4313\n1853\n3770\n3602\n6049\n3511\n5848\n2778\n3514\n\n3874\n5419\n2536\n6061\n5871\n3103\n4837\n2054\n2506\n2473\n3696\n1648\n2932\n1520\n5730\n\n69921\n\n8742\n8516\n14482\n12871\n8146\n\n5021\n1804\n1718\n2605\n4966\n5385\n2086\n5648\n3237\n5928\n5856\n3234\n2297\n4183\n\n3940\n3186\n1121\n5004\n9081\n8588\n7769\n2550\n\n7876\n8684\n4238\n6074\n9447\n1273\n4027\n8267\n2911\n\n1478\n4303\n6935\n3396\n2043\n3050\n1902\n4931\n3412\n3110\n2572\n2105\n6598\n\n2899\n2696\n2432\n1589\n5805\n5805\n4449\n5500\n2118\n3318\n2042\n4366\n1067\n3348\n3660\n\n7248\n3934\n6003\n4893\n8136\n10163\n\n18757\n22220\n5027\n\n3657\n8529\n2498\n2381\n3308\n3133\n6646\n1892\n7461\n\n49084\n\n46725\n\n2961\n5118\n4034\n2690\n5181\n5797\n5978\n1013\n6579\n7485\n\n17005\n16457\n\n6120\n5668\n6006\n3880\n1494\n6090\n5394\n3980\n1051\n1125\n1411\n4546\n1840\n\n28701\n\n6038\n7823\n3235\n7303\n3904\n2572\n1478\n8661\n2921\n1287\n\n1387\n2751\n4748\n2307\n2675\n2168\n5663\n7359\n7753\n3952\n3101\n\n11736\n4778\n1596\n\n3065\n3481\n1775\n2516\n2214\n4046\n5415\n4580\n4221\n4566\n6724\n6870\n5590\n\n3348\n3348\n5112\n4493\n3259\n2540\n2407\n4276\n3328\n4447\n1123\n3431\n5191\n5144\n3374\n\n38950\n\n6208\n3976\n5557\n5338\n3420\n4221\n6829\n6686\n6516\n2024\n1675\n4972\n\n5491\n3707\n7833\n5247\n7155\n\n1246\n9839\n1590\n7833\n8812\n4296\n\n3305\n4483\n4617\n3308\n3851\n5978\n4419\n4527\n4789\n3590\n6406\n1741\n5882\n5743\n\n25321\n32917\n\n3654\n3962\n5489\n6090\n1643\n5186\n3220\n6542\n5029\n3857\n3746\n\n5243\n12859\n6728\n19483\n\n15385\n17342\n\n7771\n5721\n3603\n3661\n3682\n6139\n2645\n1725\n7200\n8120\n\n11232\n6787\n9618\n11104\n8613\n5183\n3189\n\n25964\n23122\n11479\n\n6572\n6512\n5407\n2640\n6992\n1730\n7317\n2995\n1435\n5295\n5741\n\n1647\n12453\n11893\n18188\n\n10366\n3241\n9612\n2966\n6200\n1073\n9429\n8688\n\n4080\n4133\n9987\n4345\n4526\n1076\n10504\n\n1424\n9981\n5575\n2334\n1554\n6135\n4184\n4241\n\n15678\n13808\n12505\n14449\n16278\n\n14461\n4481\n\n4720\n8418\n6511\n8148\n6346\n6025\n6794\n7252\n3811\n1189\n\n6209\n5901\n1677\n3047\n8828\n3745\n7073\n5612\n3005\n\n6455\n2873\n6972\n6296\n6960\n4124\n4382\n1269\n2683\n4131\n4768\n\n9877\n8415\n17318\n7294\n\n7595\n4689\n1674\n1215\n1887\n2247\n7359\n4295\n5184\n4274\n3674\n\n2440\n2559\n4609\n3775\n4553\n3364\n1084\n5611\n1463\n2196\n2027\n2054\n2010\n1269\n4411\n\n3384\n3054\n4987\n3713\n5142\n5343\n5043\n2738\n3549\n6059\n\n4822\n9613\n1653\n1112\n1470\n5641" <> ...}
```

```elixir
# Part 1+2
defmodule Elves do
  def parse_to_list(string_data) do
    string_data
    |> String.split("\n\n")
    |> Enum.map(fn x ->
      String.split(x)
      |> Enum.map(fn x ->
        {i, _} = Integer.parse(x)
        i
      end)
    end)
  end

  def find_callories(list_of_elves, num_of_highest_ranked) do
    list_of_elves
    |> Enum.map(&Enum.sum/1)
    |> Enum.sort(:desc)
    |> Enum.take(num_of_highest_ranked)
    |> Enum.sum()
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, Elves, <<70, 79, 82, 49, 0, 0, 9, ...>>, {:find_callories, 2}}
```

```elixir
Elves.parse_to_list(puzzle_input) |> Elves.find_callories(1)
```

<!-- livebook:{"output":true} -->

```
72718
```

```elixir
Elves.parse_to_list(puzzle_input) |> Elves.find_callories(3)
```

<!-- livebook:{"output":true} -->

```
213089
```

```elixir
# Part 1+2 test
ExUnit.start(autorun: false)

defmodule ElvesTest do
  use ExUnit.Case, async: true

  @data "1000\n2000\n3000\n\n4000\n\n5000\n6000\n\n7000\n8000\n9000\n\n10000"

  test "parse data" do
    list_of_elves_and_calories = Elves.parse_to_list(@data)
    assert Enum.count(list_of_elves_and_calories) == 5
  end

  test "q1 find highest amount of callories carrying by an Elf" do
    callories =
      Elves.parse_to_list(@data)
      |> Elves.find_callories(1)

    assert callories == 24000
  end

  test "q2 find sum of top three Elves carrying highest amount of calories" do
    callories =
      Elves.parse_to_list(@data)
      |> Elves.find_callories(3)

    assert callories == 45000
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
...
Finished in 0.00 seconds (0.00s async, 0.00s sync)
3 tests, 0 failures

Randomized with seed 214449
```

<!-- livebook:{"output":true} -->

```
%{excluded: 0, failures: 0, skipped: 0, total: 3}
```

## Day 2

<!-- livebook:{"attrs":{"day":"2","session_secret":"AOC_SESSION","variable":"puzzle_input2","year":"2022"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input2} = KinoAOC.download_puzzle("2022", "2", System.fetch_env!("LB_AOC_SESSION"))
```

<!-- livebook:{"output":true} -->

```
{:ok,
 "C Y\nB Z\nB Z\nC Y\nB Y\nC Z\nC Z\nC Y\nB Z\nC Z\nC X\nC Y\nC Z\nC Y\nC Y\nB Z\nA Y\nC Z\nC Z\nC Z\nB X\nB Z\nC Y\nA X\nC X\nC Z\nC Y\nC Z\nC Z\nC Z\nC Y\nC Y\nA X\nC X\nC Z\nB Z\nB Z\nB Z\nB Z\nC Z\nC Y\nC Z\nB Z\nA Y\nA X\nC Z\nC Y\nC Z\nC Y\nC Z\nA X\nC Z\nC Z\nC Z\nC Z\nC Y\nC Y\nC Z\nC Z\nC Z\nC Z\nB X\nC Y\nB Y\nB X\nA X\nC Y\nC Z\nC Z\nC Y\nC Z\nC Z\nA Y\nC Y\nC Z\nC Y\nB Z\nC Z\nC Y\nB Z\nB Z\nC Z\nC Y\nC Y\nC Z\nC Z\nC Y\nC Z\nC Y\nC Y\nC Y\nC Y\nB X\nC Z\nC Z\nC X\nC X\nC Z\nB Z\nA Y\nC Y\nA Y\nC Y\nC Z\nC Y\nC Z\nC Y\nB Z\nC Z\nC Z\nC Y\nA Y\nC Z\nB Z\nC Z\nC Z\nC X\nC Z\nC Z\nC Z\nC Z\nC Z\nC Z\nB Z\nC Z\nC Y\nB Z\nC Y\nC X\nA X\nC Z\nA Y\nC Y\nC Z\nB Z\nC Z\nB X\nC Z\nC Y\nC Z\nB Z\nC Z\nC Z\nC Y\nC Y\nC Y\nB Z\nC Y\nC Y\nB X\nC Z\nB Z\nB Z\nC Z\nC Z\nC Z\nC Z\nC Z\nA Y\nC Y\nC Z\nC Y\nB Z\nB Z\nC Y\nC Z\nB Z\nC Y\nC Y\nC Z\nB Z\nC Y\nC Z\nC Y\nB Z\nC Z\nA X\nC Z\nC Y\nC Z\nB Z\nC Z\nC Y\nC Y\nC Y\nC Y\nC Y\nC Z\nC Z\nA Y\nC Z\nC Z\nC Z\nC Y\nB Z\nC Z\nB Z\nC Z\nC X\nC X\nB Z\nC Y\nC X\nC Y\nB Z\nC Y\nC X\nC Z\nC Z\nC Y\nC Z\nC Z\nB Z\nA X\nC Y\nC Z\nC Z\nC Z\nC Y\nC Y\nC Z\nC Z\nC Y\nC Z\nA Y\nC Z\nB Z\nC Z\nA Z\nC Z\nC X\nB Z\nC Y\nC X\nC Z\nC X\nC Y\nA Y\nC Y\nC Y\nC Z\nC Z\nC Y\nB Z\nA X\nC Z\nC X\nC Y\nB Z\nC X\nC Z\nC Y\nC Z\nC Y\nA Y\nB Z\nC Z\nC Y\nC Y\nC Z\nB Y\nC Y\nB X\nC Y\nC Y\nC Z\nC Z\nC Z\nC Y\nC Y\nC Y\nB X\nC Z\nC Z\nC Z\nB X\nA Y\nC Z\nC Z\nA Y\nB Z\nC Z\nA X\nC Z\nC Z\nC Z\nC X\nC Y\nC Y\nC Z\nC Z\nC Z\nC Z\nC Z\nC Z\nC Y\nB Y\nC Z\nC Z\nC Y\nC Z\nC Z\nC Y\nC Z\nA Y\nC Y\nC Z\nB Y\nA X\nB Z\nC Z\nC Z\nC Z\nA Z\nC Z\nB Z\nB Z\nC Y\nB X\nC Z\nC Y\nC Z\nC Y\nA Y\nC Z\nC Z\nC Z\nB Z\nB Z\nC Y\nC Z\nC Y\nC Z\nC X\nC Z\nC Y\nC Y\nC Y\nC X\nB Y\nC Y\nB Z\nC Z\nC Z\nC Y\nC Y\nC Z\nC Z\nC Y\nC Y\nC Z\nC Z\nC Z\nC Y\nC Y\nC Z\nC Z\nC Y\nB Z\nC Z\nC X\nA Y\nB Z\nC Z\nC Z\nB Z\nC Z\nB Z\nC Y\nC X\nC Z\nC Z\nA Y\nC X\nC Y\nA X\nC Z\nC Z\nC Z\nB Z\nC Z\nC Y\nB Z\nB Z\nC Z\nC Z\nA Y\nC X\nC Z\nB Z\nC Z\nC Z\nC Z\nB Z\nC Z\nC Z\nB Z\nC Z\nC Y\nC X\nC Z\nC Z\nA Y\nC Z\nC Z\nC Z\nA Z\nB X\nC X\nC Y\nC Z\nC Y\nC Y\nC X\nC Z\nB Z\nC Z\nA Y\nC Y\nC Z\nA X\nB Z\nB Z\nA Y\nC Z\nC Z\nC X\nC Z\nC Y\nC Y\nC Z\nC Y\nB Y\nC Y\nC Z\nC Y\nC Z\nC Z\nC X\nC Z\nC Y\nC Z\nC Y\nA X\nC Z\nB Z\nB Z\nC Y\nC Y\nC Y\nC Y\nC Z\nC Y\nA X\nC Z\nB Z\nC Y\nC Y\nC Z\nC Z\nC Y\nC Z\nC Z\nC Z\nC Z\nC Z\nB Z\nC Z\nC Y\nC X\nC Z\nC Z\nB Z\nC Z\nC Z\nC Z\nB Z\nC X\nB Z\nA Z\nC Z\nC Y\nC Y\nC Y\nB Z\nC X\nA Y\nC X\nC Y\nB Z\nC Y\nB Y\nA X\nB Z\nC Z\nB Z\nC Y\nB Z\nB X\nC Y\nC Z\nC Y\nC Y\nC Z\nB Z\nC Z\nC Z\nC Y\nC Z\nB Z\nB Y\nC Z\nC Y\nA Y\nC Z\nC Z\nA X\nC Z\nB Z\nC Z\nA Z\nC Z\nC X\nC Z\nC Z\nC Z\nC Z\nC Z\nC Z\nB Z\nC Y\nB Z\nB X\nC Y\nC Z\nB Z\nC Z\nC Y\nC Y\nC Y\nB Z\nB Y\nC Y\nC Y\nC Z\nC Z\nC Z\nB Y\nC Y\nC Y\nC Y\nC Z\nA X\nC Y\nB Z\nC Z\nA X\nA X\nC Z\nC Y\nB X\nC X\nB Y\nC Y\nC X\nA Y\nC Z\nC X\nC Z\nB X\nA Y\nC Y\nC X\nB Z\nC Y\nC Z\nC Z\nC X\nC Y\nC Z\nC Z\nC Z\nC X\nA X\nC Y\nA Y\nC Z\nC Z\nC Z\nC Y\nC Y\nC Z\nC Z\nC X\nC Z\nC Y\nB Z\nB Z\nC X\nC Z\nB Y\nC Z\nB Z\nC Z\nC Z\nB X\nC Y\nA Y\nC Z\nC Z\nA Y\nC Z\nC Y\nC Y\nC Z\nC Z\nC Z\nC Z\nB Y\nC Y\nC Y\nC X\nC Z\nC Z\nC Z\nB Y\nA Y\nA X\nA X\nC Z\nC Z\nC Y\nA Y\nC Z\nC Z\nB Z\nC Y\nC Z\nC Z\nA X\nC Z\nC Z\nC Z\nC X\nC Y\nC Z\nC Y\nA X\nC Y\nC Z\nA Y\nC Z\nC Z\nB Z\nB Z\nC Z\nA Y\nA X\nC Y\nC Z\nC Y\nA Z\nC Y\nA Y\nB Z\nC Z\nC Z\nC X\nA Y\nC Y\nC Y\nC Y\nB Z\nB X\nA X\nC Y\nB Z\nC X\nC Z\nC Z\nC Y\nC Y\nC Y\nC Z\nC Z\nA Y\nC Z\nC Z\nC Z\nC Z\nC Y\nB Z\nC Z\nC Z\nB Z\nC Y\nA Y\nC Z\nC X\nB Z\nC Z\nA X\nC Y\nA Y\nC Z\nC Y\nA X\nA X\nB X\nC Y\nC Z\nC Z\nC X\nB X\nC Z\nC Z\nA X\nC Z\nC Z\nB Z\nC Z\nC Y\nC X\nC Z\nA X\nC Z\nC Y\nC Z\nC Y\nB Z\nC Y\nA X\nC Z\nA X\nC X\nC Z\nB Z\nC Y\nC Z\nB Z\nB X\nC Y\nC Z\nC Y\nB Z\nC Y\nC Z\nB Z\nB Z\nC Y\nB Y\nC Z\nC Y\nB Z\nB X\nB Z\nA Y\nC Z\nC Y\nB Z\nC Z\nC Z\nC Z\nC Z\nC Y\nC Z\nC X\nC Z\nC Z\nC Y\nC Z\nC Z\nC Z\nC Y\nB X\nC Y\nC Z\nC Y\nC Z\nA Y\nC Y\nC Y\nB Y\nC Z\nC Z\nB Z\nA Y\nC Y\nC Y\nA Z\nB Z\nC X\nB Z\nB X\nC Z\nC Y\nC Y\nC Y\nB Z\nC Z\nB Z\nC Z\nC Z\nA X\nC Z\nB X\nC Y\nC X\nC Z\nC Y\nC Z\nC Z\nB Z\nC Z\nC Y\nA X\nC Z\nC Y\nC Z\nB X\nC Y\nC Z\nC Y\nC Y\nC Y\nA Y\nB Z\nC Z\nC Z\nC Z\nC Z\nB Z\nC Z\nC X\nB X\nB Z\nA X\nC Y\nB Y\nC Z\nC Z\nC X\nC Z\nB Z\nC Y\nC Y\nB Y\nC Y\nC Z\nC Z\nC Y\nA Z\nC Y\nB Z\nB Z\nC X\nC X\nC Y\nC Z\nC Z\nC Z\nC Z\nA Y\nC Z\nB Z\nA Y\nC Z\nC Y\nA X\nB Z\nC Z\nC Z\nC Z\nC Z\nB Z\nC Y\nB Z\nC Y\nC Y\nA X\nB Z\nC Y\nB Z\nB Z\nA Z\nA Y\nC Y\nC Y\nC Z\nC Z\nA X\nC Z\nC X\nC Y\nC Z\nC Y\nC Z\nC Z\nC Z\nC Y\nA X\nC Z\nC Y\nC Z\nC Z\nC Y\nC Z\nC Y\nC Y\nA X\nB Z\nC Y\nC Z\nC Z\nC Y\nC Y\nC Z\nC Z\nA Y\nC Y\nB Z\nB Z\nC X\nB Z\nB Z\nC Z\nB Z\nC Z\nC Y\nC Y\nC Y\nA Y\nC Z\nC Z\nC Y\nB X\nC Y\nC Y\nC X\nC Y\nC Z\nB X\nC Z\nB Z\nC Y\nC Z\nC Z\nB Z\nC Z\nC Y\nC X\nB Z\nC Y\nC Z\nC Z\nC Z\nA Y\nC Z\nC Z\nC Y\nC Z\nC Y\nC Y\nC Z\nC Y\nA X\nC Y\nC Z\nC Z\nC Z\nC Y\nC Y\nC Z\nB Z\nC Z\nB Z\nC Z\nC Y\nA Y\nC Z\nC X\nC Y\nC Y\nB Z\nC Z\nC Z\nB Z\nC Y\nC Y\nC Y\nC Z\nC Z\nB Z\nC Z\nB Z\nB Y\nB Z\nA Y\nC Y\nC Y\nC Z\nC Y\nC Z\nC Y\nB Z\nC Z\nC Z\nC Z\nC Z\nB X\nB Z\nC Z\nB Z\nC Y\nA X\nC Y\nB Z\nB Z\nB Z\nC Y\nB Y\nB Z\nC Z\nB Z\n" <> ...}
```

```elixir
data = String.split(puzzle_input2, "\n") |> Enum.map(&String.split/1)
```

<!-- livebook:{"output":true} -->

```
[
  ["C", "Y"],
  ["B", "Z"],
  ["B", "Z"],
  ["C", "Y"],
  ["B", "Y"],
  ["C", "Z"],
  ["C", "Z"],
  ["C", "Y"],
  ["B", "Z"],
  ["C", "Z"],
  ["C", "X"],
  ["C", "Y"],
  ["C", "Z"],
  ["C", "Y"],
  ["C", "Y"],
  ["B", "Z"],
  ["A", "Y"],
  ["C", "Z"],
  ["C", "Z"],
  ["C", "Z"],
  ["B", "X"],
  ["B", "Z"],
  ["C", "Y"],
  ["A", "X"],
  ["C", "X"],
  ["C", "Z"],
  ["C", "Y"],
  ["C", "Z"],
  ["C", "Z"],
  ["C", "Z"],
  ["C", "Y"],
  ["C", "Y"],
  ["A", "X"],
  ["C", "X"],
  ["C", "Z"],
  ["B", "Z"],
  ["B", "Z"],
  ["B", "Z"],
  ["B", "Z"],
  ["C", "Z"],
  ["C", "Y"],
  ["C", "Z"],
  ["B", "Z"],
  ["A", "Y"],
  ["A", "X"],
  ["C", "Z"],
  ["C", "Y"],
  ["C", "Z"],
  ["C", ...],
  [...],
  ...
]
```

```elixir
# Part 1
defmodule Scores do
  defp value(xyz) do
    case xyz do
      "X" -> 1
      "Y" -> 2
      "Z" -> 3
    end
  end

  defp win_loose(pair) do
    case pair do
      ["A", "X"] -> 3
      ["A", "Y"] -> 6
      ["A", "Z"] -> 0
      ["B", "X"] -> 0
      ["B", "Y"] -> 3
      ["B", "Z"] -> 6
      ["C", "X"] -> 6
      ["C", "Y"] -> 0
      ["C", "Z"] -> 3
    end
  end

  def score([abc, xyz]) do
    win_loose([abc, xyz]) + value(xyz)
  end

  def scores(list_of_pairs) do
    list_of_pairs
    |> Enum.map(&score/1)
    |> Enum.sum()
  end
end

test_data = [["A", "Y"], ["B", "X"], ["C", "Z"]]
# Scores.score(["A", "Y"])
# Scores.scores(test_data)
Scores.scores(data)
```

<!-- livebook:{"output":true} -->

```
13268
```

```elixir
# Part 2
defmodule ScoresPartTwo do
  @rock "A"
  @paper "B"
  @scissor "C"

  def value(abc) do
    case abc do
      @rock -> 1
      @paper -> 2
      @scissor -> 3
    end
  end

  defp win_loose_value(xyz) do
    case xyz do
      # loose
      "X" -> 0
      # draw
      "Y" -> 3
      # win
      "Z" -> 6
    end
  end

  defp match_win_loose(pair) do
    case pair do
      ["A", "X"] -> "C"
      ["A", "Y"] -> "A"
      ["A", "Z"] -> "B"
      ["B", "X"] -> "A"
      ["B", "Y"] -> "B"
      ["B", "Z"] -> "C"
      ["C", "X"] -> "B"
      ["C", "Y"] -> "C"
      ["C", "Z"] -> "A"
    end
  end

  def score([abc, xyz]) do
    choosen = match_win_loose([abc, xyz])
    value(choosen) + win_loose_value(xyz)
  end

  def scores(list_of_pairs) do
    list_of_pairs
    |> Enum.map(&score/1)
    |> Enum.sum()
  end
end

# ScoresPartTwo.score(["A", "Y"])
ScoresPartTwo.scores(data)
```

<!-- livebook:{"output":true} -->

```
15508
```

## Day 3

<!-- livebook:{"attrs":{"day":"3","session_secret":"AOC_SESSION","variable":"puzzle_input3","year":"2022"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input3} = KinoAOC.download_puzzle("2022", "3", System.fetch_env!("LB_AOC_SESSION"))
```

<!-- livebook:{"output":true} -->

```
{:ok,
 "LLBPGtltrGPBMMsLcLMMVMpVRhhfCDTwRwRdTfwDllRRRDhC\ngNFJHJFgtZFJjZJHNNFWZWZwwDjCwSDhfCDbdwjfwDTTDT\ngmQNZnZNHWnqmQpLtVLMBsPpBqrL\nHlHldQtHlctzppdQtjdczHhJRnnhGNVmVRJmVjCVFCNh\nLgWNgggZJZGFhCZr\nDbqPswwMvDPqzlBNHtzfHdwd\ntJgtJwwCtNvPHHPtHzDsdRTsBRDDWgWTgT\nQhLQjLGjZQFlFZmnmGLDrzWfRldrTrzTBRWTzs\nbFFmFZjhSFHvBCvCvJpb\nMSGcvnvMGMJgWJDpdndZwBnppfCp\nVPVfQQVbshZNZwdNDwNs\nLtLbjmQRLmVhQtTbfgWjJgFFcrqqrGSqWg\nfHfCNCwwHfGhcntntrrgHrQnrn\nFVqpSpbPpjSVMjqvVmVvMzlzwJnbtnnlzQQlrWzJgt\nPTqqRRPSRSmqSpPpSpRZwGCLGscCNLZZZTNdNZ\npQQQslVSVzzCQnZSlplzbLcHZHcrrrbZqFbZjbFm\ngWtvPgdMDDtFDHHjJJbbccbrLW\nMhNvwwDfDfdtvRQnpFNNTlSRSn\nZTnSnTTzqvFmVzvWWm\nClpCgltHNrtgsHdpLCHtDCNLVvQvVwVmwcsWQGMMQvcGcFcv\nJmrgCHCNJtlmHmNhnJjnnnjJhPfhSJ\nBgRRZTgHHvRTRmRNLNNhQWlmGFfJlWlhsQshpF\nqPqSSttwnnzqqqwtVrPwMthFsJllJJlGhpJhWJQlhVQd\nMjMwScnDPzcwjtqDtztnctrvgNZTTvCvLgvQbLbvjTBvBg\nSWQSbbqTTbPcfMZSwZZwwn\ndghjghmNDmGsGgdnfmtMRCLCCRncfc\npJDJNdsNMMhpssgdprBTBzWlpBWlllWb\nTwNLNZTwWCWLwWCSTZSLzWHGrDHHPmGdDHvndGdNfvMm\nBgpjtpgjBjVbRjQRhVsDnvgGgPnGdrmvnMDfrf\nrhRjRssQJplRtVbpthblbbLSLzFCJZFqLLFWCzqcqzLL\nPBrdPMtBPvCQBVBjCfWPqSHbszhGGnsfSG\nJpmDwJgWJgNzmShhmfSGzh\npRwNcNpFZNZRWgcNplpjVCMVjdvdMQtCMLZjMZ\nlDrcnnlLqLRcDDZRLjFVTHzGCLGVPzGPVWGB\npNwHpdmsNJsbpwsbzJTCPWTVFzzQTWCQ\nvbhswdtdwfdsmtNSssHwvllvMcZjnjcnZqlgMDZglM\nGVVtJGtzVFsVsDTH\nmQRgcBRmRLnBjrtFjCCrHmFF\ngqpBnlRpgZcvdSdlMdSvMt\ntMSCNGSflffNhnnGqlPPsrzWPrTrVpWr\nbZHbmDBQmbDZQdbDcRFZZBTTWWWwqVzszWjrFPVwrzqq\nHQBLHmQVQLDdCggMfgMNLvNG\nHHNDzNJPJPmdPcNGGGhnhwnVhCQBwBjQ\nbsSbLfrLtRSLRSRRRsBwhCpfpCzlwCBVjlCV\nzvvsvqLtZqLtzRsqTrggRMHJNWJgHHHNJcgWNPdHcH\nqgbNvqbgmmZgZLvZqgnZzlpzpzHtVPzttGPrrnnl\njwswGjQDMsQMjdBwdcjCHVtcPVpCVCrPlVSrpc\nGsFWBfhGBfDFDFWqNbLNqbgvqbbvfN\nHgwWqtcqHNWgnHcNNCfvJCCJJfJGvnPfrR\nsbDhZSmdBbsSdmSDdrjjffRvdjPrprCd\nvvZbSFFlFHtqFqqWNc\nZRjnbRsHlncZGjTRTfFVSQBQppQvvFBHpF\nzrLwMdhDhqJJttDQSldQVPQSlSfPlV\nhCWWCzqWnmcZlRRW\nHfgfQflHjWgRQRdRBWVsnbvvscbbbwvmbHncSc\ntJGLtPPGZPwVvSSPhw\nCLGTLZqJtMGqLDFFDZZJFZJpWjRpVNRWpllDpjlBfgVjlp\nrhhGZZhLNhPmfJqvfLlq\ndHRTHRHQQWcTCRTHmmjJgfqqlGmgWgql\nCCwRzTRRdCCRSQwzRcppprZtrMhGBMZMnDSt\nWfffvnSnfSBshwsjhlvGlh\nZHpFNTmppVmNzVVmmFMZzbwwjHGrGlPhCGrljbgHsg\npLZMmqVsZVMMVVscDfdtSSStqcRRdn\nRhRbLzRLHLCPmzznHLbzCRTJhdTVSJJVSjdFFNFFNTJv\nMGgMfpMsBgpnMtGfnfwBtDBjFVdNSSSFdvJSQSpTJdJjNv\nlMsBgDMsblmRblnz\nClNcJZttLfLvvRQzQWwRQN\nhrpMdqMspsrGDdMphhdMMMMHBmRWmSVrRVzVTzQBQvSmzVWV\nppHDMGhMMDbGMdDMGbgFbgbMlJJnjjZtZfLPcfcngZfPPfCR\nZRslLRgCclZLZzQghQhfrbfGbJ\npVSHpBBBBDVDqDBldVzfrMzQbfSTSJrzzJrJ\nDqqHnBDlpNDVVnpnjtDtNjCvFLcsFFPZRcPsNNmPcFcP\nLmLWSmSRNdcpcRHFHrWzWHbMbwZlZlPSbTjlwPbTPJTf\nDttBsvhnhqvGGBhGtBVNBVqJlPwslMMPJwTjZbbZPTfbPs\nCDthQvVNVFCHHWCFdr\nRRtCWSzQZdRMrtRWrSztMggcGDfQTcfFTGqTLgGDLc\nbnVhnvPHhhdJJBTLDGcDTcBvvD\npmbnhmPPmHwdCjmdrRtCdj\nlTPzwhzmHpTvrDCDHJnsNN\ntdgtbMMBbWdFbtqJCnsrqnMMDsrq\nFjWdtgLSWttWtLSWtDWBjGGmwGlzTRwPTQGhlQQm\nwcbnTtTppNLrntznTBBccCGrVldRrZqdqRCZdFZCVZ\nJfHDgjgPPfRRgRlLRddR\njhDhhLMfmJjMjDbNSTzbbbtmttmN\nCfGlvzpvpTjzzCWjvDlfvbbJbCRSdSRhsSQCMhdbhR\nwqrSmrLHHNcLqrrLBNsndssnnhPshnsQwbnJ\nNtcmBLcNVDWzjSvWtv\nvZPCSCvCJffvVvmCmPqCSlDSscczHDRcwcHzRlRHHs\nLFGFNnGrdQttNMFpzpMRRDslsJwsJH\ngjtLnFBJrLvhZvCbZhqB\nDBcjVFjDhQMSJVZbHZbl\nnfmsqppnLfTnfmMmzppwgllSrbSHHtllqbtSwZ\nTRzTnfRWnfdzWssfnRfRpncQPBhdDjjDCPcMQcCBGPPj\nNSjWCHjNHjpPWPpSFWdtqBMBBFVBvqvJGJwqBt\ngQllgDrnhQQDGRshRsZfVtVMRqwMtccVJcBtvRqw\nDQrzrDzhQgrsZLrZjWSSHNTWCjjNGTLH\nCgdcCFcbTbBzPgmNRmpptP\nrsZtsvVvHZZzPmqVNPzNmV\nHZjrwrjnjtHSHwDGdFhCdhWWJnWchCFJ\nRMTqQMRJqPtBtGBPtWjN\nssHfSfShCwwbhsbHhhsmSfhSGNpCpNCjBBBLptcGtpzBBBWW\nHnwrSFwffHsFwrSSjfHglJJlTgZdFdgZRZTDDM\npDLDWlDSlJDmzSJnDScRPLGGvqFqLPccGLgv\nCZHfwNMVNjsHNNqPgcbcBbRQGQ\ndCffZCjVCdCHHTmnlSgTlTSrlStp\nbFtlLCvLlVjpCGPJndrrMMCDDCnrMg\nhRsTwcZcBjZRJrfMDnsHrJnH\nmNZqcTSSBTScNzVQFtGtjpFtjmGG\nbjHdLrHjRWpDCtLzhzps\nlZcGfTvQcQfvlqqcNCcBvVwtGzmzthmwmpthMDmswgMt\nNcqflNQTBTTvvQSvqSVvQJbHPHbHCRJdndJPSHjWHb\nCVmRncrRVrhcmsBgfmtfdJsJmt\nbZHvZZDJwpWtdZgtGNGd\nvSbwHDMFMJqPQqQvvSPQqpSwjRcTVTLjLRhVCLFLjLFnFzCC\nmtffsmBwfwBDBmmsLsHqtpftGrMVMPSMPsVvhNvFrGPMvjNV\nTQTQCRWjJcdcQQSPrhhPSvVGPF\ncTRJCnldWJZlTgbWgbdbpqfqmppjmtljpqzmjpLw\nNNPmrmPWmrSSNNPmnglghmCvLCCflh\nLFbsDQMQFtQFHbQHqhvnngCftpcllptJgJ\nbDjsGqLLdRVjPZPP\ntgrbBQlbtRblwtRGrbCNswDDCsvFszpssCss\nSJVMhSZfHvpdhphN\nSMLpWZSSZMjfgGBgRtbQgl" <> ...}
```

```elixir
test_data =
  "vJrwpWtwJgWrhcsFMMfFFhFp\njqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\nPmmdzqPrVvPwwTWBwg\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\nttgJtRGJQctTZtZT\nCrZsJsPPZsGzwwsLwLmpwMDw"
```

<!-- livebook:{"output":true} -->

```
"vJrwpWtwJgWrhcsFMMfFFhFp\njqHRNqRjqzjGDLGLrsFMfFZSrLrFZsSL\nPmmdzqPrVvPwwTWBwg\nwMqvLMZHhHMvwLHjbvcjnnSBnvTQFn\nttgJtRGJQctTZtZT\nCrZsJsPPZsGzwwsLwLmpwMDw"
```

```elixir
# Part 1
defmodule RuckSackItems do
  def split_middle_and_intersect(line) do
    {p1, p2} = String.split_at(line, div(String.length(line), 2))

    MapSet.intersection(
      MapSet.new(String.codepoints(p1)),
      MapSet.new(String.codepoints(p2))
    )
    |> MapSet.to_list()
    |> List.first()
  end

  def type_priority_value(char) do
    <<code, _rest::binary>> = char

    cond do
      code >= 65 && code <= 90 -> code - 38
      code >= 97 && code <= 122 -> code - 96
    end
  end
end

part_1_result =
  String.split(puzzle_input3, "\n")
  |> Enum.map(&RuckSackItems.split_middle_and_intersect(&1))
  |> Enum.map(&RuckSackItems.type_priority_value(&1))
  |> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
7793
```

```elixir
# Part 2
defmodule Group do
  def intersect_list([head | [next | rest]]) do
    i = intersect_pair(head, next)
    intersect_list([i | rest])
  end

  def intersect_list([value]) do
    value
  end

  defp intersect_pair(i1, i2) do
    MapSet.intersection(
      MapSet.new(String.codepoints(i1)),
      MapSet.new(String.codepoints(i2))
    )
    |> MapSet.to_list()
    |> List.to_string()
  end
end

part_2_result =
  String.split(puzzle_input3, "\n")
  |> Enum.chunk_every(3)
  |> Enum.map(&Group.intersect_list/1)
  |> Enum.map(&RuckSackItems.type_priority_value/1)
  |> Enum.sum()
```

<!-- livebook:{"output":true} -->

```
2499
```
